pops --> procedure --> l

        class and objects.. oops machine languge...

oop --> object oriented programming --> o

        class objetc ....
        real time application....
        sclable application... using oops concept...

#NAMIG CONVENTION 

1) class name --> first letter capital and join with camel case
2) variable name --> first letter small and join with camel case
3) function name --> first letter small and join with camel case



4 pillars of oops
----------------------------------------------------------------------
1) encapsulation
    1) data hiding
        access specifiers
            public
            private
            protected
    2) data binding
        1) static binding
            : binding the data at compile time
        2) dynamic binding
            : binding the data at run time
    3) data abstraction

    4) data encapsulation
        :class and object ,method and function, variable and data member
        constructor and destructor

class: class is a collection of objects, data member and member function, class is a blue print of object

object: object is a real time entity, 
object is a instance of class, object is a run time entity

class    object 

Fruit     apple    applle is fruit and fruit has apple
Vehicle   car      car is Vehicle and Vehicle has car

School    student  
Shose      Nike


: class keyword.. 
--------------------------------------------------------------------------------------------------------------


2) abstraction
    1) abstract class
    2) abstract method
    3) interface
    
3) inheritance
    1) single inheritance
    2) multilevel inheritance
    3) multiple inheritance  --> '
        1 parent class and multiple child class
        2 multiple parent class and 1 child class --> pointer
    4) hybrid inheritance : multiple + multilevel
    5) hierarchical inheritance : 1 parent class and multiple child class


                                    x

           a               b               c               d
     p          q   m             n  o             p   q   r   s       




:inheritance : --> child class can use prop of parent class this process called inheritance, but parent class
can not use property of child class

use: ->code reusability
     ->code optimization
     ->code extensibility
     ->code maintainability




4) polymorphism        
    1) compile time polymorphism
        1) function overloading
        2) operator overloading
    2) run time polymorphism
        1) function overriding
        2) virtual function



constructor and destructor:

constructor : constructor is special function whihc has same name as class name:
use of constructor is to initialize the data member of class / instance variable of class and object of class

constructor is called automatically when object is created
constructor is called only once when object is created
constructor does not return any value
constructor can have parameter

in cpp every class must have constructor:

compiler will provide default constructor if developer does not provide any constructor

type:
    1) default constructor / zero parameter constructor
        : constructor which does not have any parameter



    2) parameterized constructor
        : constructor which has parameter
    3) copy constructor
        : constructor which has parameter of same class type
    4) destructor
        : destructor is special function which has same name as class name but with ~ sign



polymorphism: poly means many and morphism means form, so polymorphism means many form of function
Phone: watch, call,toarch
person : employee,Son / h....., 

compile time polymorphism: function overloading and operator overloading

function overloading:
same name of function in same class with different parameter is called function overloading


search(String produname)
search(String produname,int price)
search(String produname,int price,string color)



run time polymorphism: function overriding and virtual function

overriding: 
same name of function develope in child class it is called overriding

GOV : --> parent class

GOV
call()


JIO --> SIM CARD 
    jiocall()
    call()
AIRTLE --> SIM CARD
    airetlcall()
    call()


macd --> 

macd --> india 

    burger(param list...)


macd --> maninagar
    burger(param list...)


#smart pointers:

smart pointers are the objects which are used to store the address of dynamically allocated memory
1)auto_ptr
2)unique_ptr
3)shared_ptr
4)weak_ptr

#auto_ptr:
1)using auto_ptr we can manage objects obtain from new expression and delter threm when auto_ptr its self destroy
2)whene an object is describe through auto pointer is stores a pointer to single object

#unique_ptr:
unique_ptr stores one pointer only. we can assig object by removing current object from pointer..

#shared_ptr:
by using shared ptr more than one pointer can point to same object
. it uses reference counting to manage the object

#weak_ptr:
weak_ptr is a smart pointer that holds a non-owning reference to an object that is managed by shared_ptr.
//non_owning means it does not have ownership of the object

Problems with Normal Pointers:
memory leak
dangling pointer
wild pointer
buffer overflow


what is classs?
class is bluprint in which we can define data member and member function

UML CLASS diagram:

Bank class
Users --> user releted data member and member function

requirement of well formed class diagram:
1)completeness and sufficiency : all the data member and member function should be present in class diagram

Product class
    name
    price
    qty
    total
    discount
    netprice
    tax
    netprice
    gst
    netprice
    total

    calculateTotal()
    calculateDiscount()
    calculateTax()
    calculateGst()
    calculateNetPrice()
    calculateFinalPrice()
    addProduct()
    removeProduct()
    updateProduct()
    searchProduct()
    displayProduct()


2)Primitiveness : 
3)Low coupling : it define independency of class
    tight coupling : if one class is dependent on another class

            class DTDC{

                courier -->
            }
            class Amazone : public DTDC{

    
            }   

4)High cohesion : it define the relationship between data member and member function
low cohesion : if data member and member function are not related to each other

Class Users{

    /// Users releted fetures
    //otp//mail // logs///

}

otp{

        //security....
}



loosely coupled and highly cohesive class diagram is called well formed class diagram


Aggregation : it is a special form of association where all object have their own life cycle but there is ownership
Vehicle Has a Engine
School has a student
inheritance :
    is-a relationship
    circle is a shape
    square is a shape
    rectangle is a shape
    triangle is a shape
    





Term and defination                                     symbols
----------------------------------------------------------------------------------------------------------------
A class:



ProductDetail -->




realtion:
exactly one  [ont to one relation ]  1:1 [Flight and pilo,department and hod][School,principal]
zero and more [] 0..* [department and student] [School,student]
one and more [] 1..* [department and hod,flight and passenger][store,customers]
zero or one [] 0..1 [an employee can be married or unmarried] [perspn ,empyeed unemployed]
specific range 2.3 [flight and pilot] 2 flight has 3 pilots [][]
multipule disjoint ranges 1.3.5 [a studeny commitee] an student is member of 1 to 3 or 5 commitee


paitent --->doctor --> hospital-->appoinment
1 paitent can have 1 doctor
1 doctor can have 1 hospital
1 paitent schedule 1 appoinment with 1 doctor
1 doctor can have  many appoinment of many paitent
1 appoinment can have 1 billing
1 paitent can have zero or more medical history